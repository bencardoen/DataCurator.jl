BootStrap: docker
From: fedora:38

%files
    DataCurator.jl.zip /opt/DataCurator.jl.zip

%post
    ## Get the tools we'll need
    dnf install -y wget unzip python3 R python3-pip g++ openssh-clients curl
    dnf groupinstall -y 'Development Tools'
    pip3 install smlmvis
    pip3 install meshio
    ## Setup Julia
    export JLMJV=1.9
    export JLV=$JLMJV.3
    export PYTHON=`which python3`
    unset R_HOME
    export R_HOME=`R RHOME`
    echo $R_HOME
    export JULIA_TGZ=julia-$JLV-linux-x86_64.tar.gz
    mkdir -p /opt/julia && cd /opt/julia
    wget https://julialang-s3.julialang.org/bin/linux/x64/$JLMJV/$JULIA_TGZ && tar -xf $JULIA_TGZ && rm $JULIA_TGZ
    export PATH=/opt/julia/julia-$JLV/bin:$PATH
    export JULIA_DEPOT_PATH=/opt/juliadepot
    mkdir -p $JULIA_DEPOT_PATH

    ## Setup local package
    export PKGNAME="DataCurator"
    cd /opt && unzip $PKGNAME.jl.zip
    export LOCALPKG=/opt/$PKGNAME.jl
    cd $LOCALPKG
    julia --project=$LOCALPKG -e 'using Pkg; Pkg.update(); Pkg.build(); Pkg.instantiate()'
    julia --project=$LOCALPKG -e 'using DataCurator'
    echo "Setting up precompile"
    #This one runs the tests, so everything that has test coverage is optimized
    julia --project=$LOCALPKG --trace-compile=dc_precompile.jl scripts/precompile.jl
    # Next, generate testdata so the CLI can also be profiled
    julia --project=$LOCALPKG scripts/testdataset.jl
    julia --project=$LOCALPKG --trace-compile=dc_precompile2.jl scripts/curator.jl -r td.toml
    # Fuse precompile lists
    cat dc_precompile2.jl >> dc_precompile.jl
    #Cleanup
    rm -rf /tmp/testdataset
    #Compute precompile
    julia --project=$LOCALPKG scripts/setupimage.jl
    chmod -R 755 /opt/DataCurator.jl
    rm -rf /opt/juliadepot/logs
    ln -s /dev/shm/ /opt/juliadepot/logs

    ## Cleanup
    #dnf remove -y wget unzip

%environment
    export LC_ALL=C
    export LOCALPKG=/opt/DataCurator.jl
    export JLMJV=1.9
    export PYTHON="/usr/bin/python3"
    export R_HOME="/usr/lib64/R"
    export JLV=$JLMJV.3
    export PATH=/opt/julia/julia-$JLV/bin:$PATH
    export JULIA_DEPOT_PATH=/opt/juliadepot

%runscript
    echo "Executing DataCurator with arguments $@"
    /opt/DataCurator.jl/runjulia.sh "$@"

%labels
    Author Ben Cardoen, bcardoen@sfu.ca
    Version v0.0.2

%help
    This is a container to offer DataCurator without altering the local user environment, for testing purposes.
    Usage (interactively):
    singularity shell image.sif
    Singularity> julia --project=/opt/DataCurator.jl
    or
    singularity exec image.sif julia --project=/opt/DataCurator.jl <yourcode>
    or for fastest execution
    singularity exec image.sif julia --project=/opt/DataCurator.jl --sysimage=/opt/DataCurator.jl/sys_img.so <yourcode.jl>
